options
{
    LOOKAHEAD=1;
    DEBUG_PARSER = true;
}

PARSER_BEGIN(Parser)


public class Parser
{
    public static void main(String args[]) throws ParseException {
      	System.out.println("Write an arithmetic expression:");
		Parser parser = new Parser(System.in);
		SimpleNode root = parser.Expression(); // returns reference to root node
        	
		root.dump(""); // prints the tree on the screen

		//System.out.println("Expression value: "+myCalc.eval(root));
    }
	
}

PARSER_END(Parser)

SKIP :
{
	" " | "\r" | "\t" | "//" | "\n"
	| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n") >
	| <"/*"(~["/"])*  "*""/" > //multiline comments
}

TOKEN:
{
    	< INTEGER: (["0"-"9"])+ >
	|   < COMMA: "," >
	|   < LPAR: "(" > |   < RPAR: ")" >
	|   < LBRACE: "{" > | <RBRACE: "}">
	|   < LSBRACE: "[" > | <RSBRACE: "]" >
	|   < PVIRG: ";" >
	|   < FSTOP: ".">
	|   < EXCLM: "!">
	|   < EQUAL:"=">
	|   < AND: "&&" >
	|   < PLUS : "+">
	|   < MINUS: "-">
	|   < GREATER :">" >
	|   < SMALLER :"<" >
	|   < MULT: "*" >
	|   < DIV: "/" >
	|   < IF:"if">
	|   < ELSE: "else">
	|   < NEW:"new">
	|   < THIS:"this">
	|   < TRUE:"true">
    |   < WHILE:"while">
	|   < FALSE: "false">
    |   < IMPORT: "import" >
    |   < INT: "int" >
    |   < BOOLEAN: "boolean" >
    |   < LENGTH: "length">
    |   < STATIC: "static" >
    |   < MAIN: "main" >
    |   < RET: "return" >
    |   < CLASS : "class">
    |   < EXTENDS : "extends" >
    |   < PUBLIC: "public" > | < PRIVATE : "private" > | < PROTECTED : "protected" >
    |   < STRING: "String">
    |   < VOID: "void" >
    |   < IDENTIFIER: ["A"-"Z", "a"-"z"](["0"-"9", "A"-"Z", "a"-"z", "_"])* >

}

SimpleNode Expression(): {}
{
   Main() {return jjtThis;} // Java code inside brackets
}

void Main() #void : {}
{
    (ImportDeclaration())* ClassDeclaration()
}

void Statement() #Statement: {}
{
    <LBRACE> (Statement())* <RBRACE>
    | IfStatement()
    | WhileStatement()
    | ExpressionDeclaration() [Attribution()] <PVIRG>
}

void IfStatement() #If : {}
{
    <IF> <LPAR> ExpressionDeclaration() <RPAR>
        Statement()
    <ELSE>
        Statement()
}

void WhileStatement() #While : {}
{
    <WHILE>  <LPAR> ExpressionDeclaration() <RPAR>
        Statement()
}

void Attribution() #void:{}
{
   <EQUAL> ExpressionDeclaration()
}


void ExpressionDeclaration() #void : {}
{
    ComparisonExpression() (<AND> ComparisonExpression()  #And(2))*


}

void ComparisonExpression() #void : {}
{
    AritmeticExpression()
    (
        <GREATER> AritmeticExpression() #Greater(2) | <SMALLER> AritmeticExpression() #Smaller(2)
    )*
}

void AritmeticExpression() #void : {}
{
     MultiplicativeExpression()
    (
        <PLUS> MultiplicativeExpression() #Plus(2) | <MINUS> MultiplicativeExpression() #Minus(2)
    )*
}


void MultiplicativeExpression() #void : {}
{
     NegationExpression()
    (
        (<MULT> NegationExpression() #Mult(2) | <DIV> NegationExpression() #Div(2))
    )*
}

void NegationExpression() #void : {}
{
   <EXCLM> AccessExpressions() #Negation(1) | AccessExpressions()
}

void AccessExpressions() #void : {}
{
    Terminals()
    (
        <LSBRACE>  Terminals() <RSBRACE>
        |
         <FSTOP> (<LENGTH>| <IDENTIFIER> <LPAR> [ExpressionDeclaration() (<COMMA> ExpressionDeclaration())*] <RPAR>)
    )*
}

void Terminals() #void : {}
{

    <INTEGER> #Int
    | <TRUE> #True
    | <FALSE> #False
    | <IDENTIFIER> [<LPAR> <RPAR>]#Ident
    | <THIS> #This
    |   NewDeclaration() #New
    |   <LPAR> ExpressionDeclaration() <RPAR>

}

void NewDeclaration() #void : {}
{
    <NEW>
    (<INT> <LSBRACE> ExpressionDeclaration() <RSBRACE> | <IDENTIFIER> <LPAR> <RPAR>)
}

void ImportDeclaration() #Imp: {}
{
    <IMPORT> Module() <PVIRG>
}
void Module() #Module: {}
{
   <IDENTIFIER> [<FSTOP> Module()]
}

/*METHOD DECLRATIONS */
void MethodDeclaration() #MethodDecl : {}
{
    <PUBLIC> (ClassMethod() | MainDeclaration())
}
void ClassMethod() #ClassMethod : {}
{
    Type() <IDENTIFIER> <LPAR> MethodArgs() <RPAR>
    <LBRACE>
        MethodBody()
    <RBRACE>
}
void MainDeclaration() #MainDecl : {}
{
   <STATIC> <VOID> <MAIN> <LPAR> <STRING>Array() <IDENTIFIER><RPAR>
   <LBRACE >
          MethodBody()
   <RBRACE>

}
void MethodArgs() #void : {}
{
    Type() <IDENTIFIER> #MethodArg [<COMMA> MethodArgs()]
}
void MethodBody() #methodBody : {}
{
    (LOOKAHEAD(2)  Statement() | VarDeclaration())*

    [<RET> #ret ExpressionDeclaration() <PVIRG>]
}
/*
void Type() #Type : {}
{
    (<INT> | <STRING> | <BOOLEAN> | <IDENTIFIER>)[Array()]//standard java var or object
}
 */

/*VAR DECLARATIONS*/

void Identifier() #Ident: {}
{
   <IDENTIFIER> ["." Identifier()]
}

void Array() #Array : {}
{
    <LSBRACE> <RSBRACE>
}


void VarDeclaration(): {}
{
     Type() Identifier() <PVIRG>
}

void Type(): {}
{
    <INT> [Array() ] #Int
    | <BOOLEAN> #Boolean
    | Identifier()
}


/*CLASS DECLARATION*/


void ClassDeclaration() #ClassDec : {}{
    <CLASS> <IDENTIFIER> [ExtendsDec()]
    <LBRACE>
        ClassContents()
    <RBRACE>
}

void ExtendsDec() #Extends :{}{
    <EXTENDS> <IDENTIFIER>
}

void ClassContents() #void :{}{

    (VarDeclaration())*(MethodDeclaration())*
}
