options
{
    LOOKAHEAD=1;
    DEBUG_PARSER = false;
    NODE_SCOPE_HOOK = true;
}

PARSER_BEGIN(Parser)


import java.util.ArrayList;
import java.util.List;
import pt.up.fe.comp.jmm.report.*;

public class Parser
{
//    private static in
    private int errorCnt = 0;
    private ArrayList<Report> reports = new ArrayList<Report>();

    public static void main(String args[]) {

    }

    private void jjtreeOpenNodeScope(Node n) {
        SimpleNode sn = (SimpleNode) n;
        Token t = getToken(1);
        sn.put("line", Integer.toString(t.beginLine));
        sn.put("col", Integer.toString(t.beginColumn));
    }

    private void jjtreeCloseNodeScope(Node n) {}
    public int getErrorCnt() {return this.errorCnt;}
    public ArrayList<Report> getReports() { return this.reports; }
}


PARSER_END(Parser)



SKIP :
{
	" " | "\r" | "\t" | "//" | "\n"
	| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n") >
	| <"/*"(~["/"])*  "*""/" > //multiline comments
}

TOKEN:
{
    	< INTEGER: (["0"-"9"])+ >
	|   < COMMA: "," >
	|   < LPAR: "(" > |   < RPAR: ")" >
	|   < LBRACE: "{" > | <RBRACE: "}">
	|   < LSBRACE: "[" > | <RSBRACE: "]" >
	|   < PVIRG: ";" >
	|   < FSTOP: ".">
	|   < EXCLM: "!">
	|   < EQUAL:"=">
	|   < AND: "&&" >
	|   < PLUS : "+">
	|   < MINUS: "-">
	|   < GREATER :">" >
	|   < SMALLER :"<" >
	|   < MULT: "*" >
	|   < DIV: "/" >
	|   < IF:"if">
	|   < ELSE: "else">
	|   < NEW:"new">
	|   < THIS:"this">
    |   < WHILE:"while">
    |   < LITERALBOOL : "true" | "false">
    |   < IMPORT: "import" >
    |   < INT: "int" >
    |   < BOOLEAN: "boolean" >
    |   < LENGTH: "length">
    |   < STATIC: "static" >
    |   < MAIN: "main" >
    |   < RET: "return" >
    |   < CLASS : "class">
    |   < EXTENDS : "extends" >
    |   < PUBLIC: "public" > | < PRIVATE : "private" > | < PROTECTED : "protected" >
    |   < STRING: "String">
    |   < VOID: "void" >
    |   < IDENTIFIER: ["_", "$","A"-"Z", "a"-"z"](["0"-"9", "A"-"Z", "a"-"z", "_", "$"])* >

}

SimpleNode Start() #Root :  {}
{
   Main() {return jjtThis;} // Java code inside brackets
}

void Main() #void : {}
{
    (ImportDeclaration())* ClassDeclaration() <EOF>
}

void Statement() #void: {}
{
    (<LBRACE> (Statement())* <RBRACE>)
    | IfStatement()
    | WhileStatement()
    | ExpressionDeclaration() [Attribution()] <PVIRG>
}


void IfStatement() #If: {}
{
    <IF> <LPAR> ExpressionDeclaration() <RPAR>
        Statement() #Body
    <ELSE>
        Statement() #Else
}

void WhileStatement() #While : {}
{
    <WHILE>  <LPAR>
    try {
        ExpressionDeclaration() <RPAR>
    }
    catch (ParseException e) {
        Token t = getToken(0);

        this.reports.add(new Report(ReportType.ERROR, Stage.SEMANTIC, t.beginLine, e.toString()));

        if (this.getErrorCnt() >= 10) {
            System.out.println("Too many errors");
            throw new Exception();
        }


        // consume tokens all the way up to a token of "kind" - use a do-while loop
        // rather than a while because the current token is the one immediately before
        // the erroneous token (in our case the token immediately before what should
        // have been "if"/"while".
        do {
            t = getNextToken();
        }
        while (t.kind != RPAR && t.kind != LBRACE);



        this.errorCnt++;
    }
        Statement() #Body
}

void Attribution() #void:{}
{
   <EQUAL> ExpressionDeclaration() #Equal(2)
}



void ExpressionDeclaration() #void : {}
{
    ComparisonExpression() (<AND> ComparisonExpression()  #And(2))*
}

void ComparisonExpression() #void : {}
{
    AritmeticExpression()
    (
       <SMALLER> AritmeticExpression() #Smaller(2)
    )*
}

void AritmeticExpression() #void : {}
{
     MultiplicativeExpression()
    (
        <PLUS> MultiplicativeExpression() #Plus(2) | <MINUS> MultiplicativeExpression() #Minus(2)
    )*
}


void MultiplicativeExpression() #void : {}
{
     NegationExpression()
    (
        (<MULT> NegationExpression() #Mult(2) | <DIV> NegationExpression() #Div(2))
    )*
}

void NegationExpression() #void : {}
{
   <EXCLM> PriorityExpressions() #Negation(1) | PriorityExpressions()
}

void PriorityExpressions() #void : {Token t;}
{
    Terminals()
    (
        <LSBRACE>  ExpressionDeclaration() <RSBRACE> #Array(2)
        |
        <FSTOP> ((<LENGTH> #Length(1)) | MethodCall())
    )*
}


void MethodCall() #MethodCall(2): {Token t;}
{
    t=<IDENTIFIER> {jjtThis.put("name", t.image);}  <LPAR> ([ExpressionDeclaration() (<COMMA> ExpressionDeclaration())*] #Arguments) <RPAR>
}



void Terminals() #void : {Token t;}
{
    t = <INTEGER> { jjtThis.put("type", "int"); jjtThis.put("value", t.image); }#Literal  // literal -> type: int; value = token.image
    | t = <LITERALBOOL> { jjtThis.put("type", "boolean"); jjtThis.put("value", t.image); } #Literal  //literal_boolean
    | t=<IDENTIFIER>{jjtThis.put("name", t.image);} #Ident
    | <THIS> #This
    | NewDeclaration()
    | <LPAR> ExpressionDeclaration() <RPAR>

}

void NewDeclaration() #void : {Token t;}
{
    <NEW>
    (
        <INT> <LSBRACE> ExpressionDeclaration() <RSBRACE> #NewArray(1)
    |
      t = <IDENTIFIER> {jjtThis.put("name", t.image);} #New <LPAR> <RPAR>
    )

}

/*IMPORT DECLARATION*/
void ImportDeclaration() #ImportDec: {String s;}
{
    <IMPORT> s=Module() {jjtThis.put("class",s);} <PVIRG>
}

String Module() #Module: {Token t;String s;}
{
    t = <IDENTIFIER> {jjtThis.put("name", t.image);s = t.image;} [<FSTOP> s=Module()]
    {return s;}
}

/*METHOD DECLERATIONS */
void MethodDeclaration() #void : {}
{
    <PUBLIC> (ClassMethod() | MainDeclaration())
}


void ClassMethod() #Method: {Token t;}
{
    Type() t=<IDENTIFIER> {jjtThis.put("name", t.image); }<LPAR> ([MethodArgs()] #Parameters) <RPAR>
    <LBRACE>
        MethodBody()
    <RBRACE>
}
void MainDeclaration() #Method: {Token t; Token main;}
{
   <STATIC> <VOID> main = <MAIN> {jjtThis.put("name", main.image);} <LPAR> <STRING> (Array() t = <IDENTIFIER> {jjtThis.put("name", t.image); } #Ident) #Parameters<RPAR>
   <LBRACE >
          MethodBody()
   <RBRACE>

}
void MethodArgs() #void : {}
{
    VarDecl() [<COMMA> MethodArgs()]
}
void MethodBody() #MethodBody : {}
{
    (LOOKAHEAD(2)  Statement() | VarDeclaration())*

    [<RET>  ExpressionDeclaration() #ret <PVIRG> ]
}


/*VAR DECLARATIONS*/
void Array() #void : {}
{
    <LSBRACE><RSBRACE>
}

void VarDeclaration() #void: {}
{
    VarDecl()  <PVIRG>
}

void VarDecl() #VarDecl:{Token t;}{
    Type() t=<IDENTIFIER> {jjtThis.put("name", t.image);}
}

void Type() #Type : {Token t;boolean isArray = false;}
{
    t = <INT> [Array() {isArray=true;}] { jjtThis.put("type", t.image);  jjtThis.put("isArray", ""+isArray); }
  | t = <BOOLEAN> { jjtThis.put("type", t.image); jjtThis.put("isArray", "false");}
  | t = <IDENTIFIER> { jjtThis.put("type", t.image); jjtThis.put("isArray", "false");}
}

void Identifier() #void: {Token t;}
{
   t = <IDENTIFIER> { jjtThis.put("name", t.image); } #Ident
}

/*CLASS DECLARATION*/

void ClassDeclaration() #Class: {Token t;}{
    <CLASS> t=<IDENTIFIER> {jjtThis.put("class", t.image);}  [ExtendsDec()]
    <LBRACE>
        ClassContents()
    <RBRACE>
}

void ExtendsDec() #Extends :{}{
    <EXTENDS> Identifier()
}

void ClassContents() #void :{}{

    (VarDeclaration())*(MethodDeclaration())*
}
