options
{
    LOOKAHEAD=1;
}

PARSER_BEGIN(Parser)


public class Parser
{
    public static void main(String args[]) throws ParseException {
      	System.out.println("Write an arithmetic expression:");
		Parser parser = new Parser(System.in);
		SimpleNode root = parser.Expression(); // returns reference to root node
        	
		root.dump(""); // prints the tree on the screen

		//System.out.println("Expression value: "+myCalc.eval(root));
    }
	
}

PARSER_END(Parser)

SKIP :
{
	" " | "\r" | "\t" | "//"
}

TOKEN:
{
    	< INTEGER: (["0"-"9"])+ >
	|   < LF: "\n" >
	|   < PVIRG: ";" >
    |   < IMPORT: "import" >
    |   < INT: "int" >
    |   < BOOLEAN: "boolean" >
    |   < IDENTIFIER: ["A"-"Z", "a"-"z"](["0"-"9", "A"-"Z", "a"-"z"])* >
}

SimpleNode Expression(): {}
{
   VarDeclaration() {return jjtThis;} // Java code inside brackets
}

void VarDeclaration(): {}
{
     (Type() Identifier() <PVIRG> <LF>)+
}

void Type(): {}
{
    LOOKAHEAD(2) <INT> ["[" "]"] #Int
    | <BOOLEAN> #Boolean
    | Identifier()
}

void Identifier() #Ident: {}
{
   <IDENTIFIER> ["." Identifier()]
}