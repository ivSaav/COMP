options
{
    LOOKAHEAD=1;
}

PARSER_BEGIN(Parser)


public class Parser
{
    public static void main(String args[]) throws ParseException {
      	System.out.println("Write an arithmetic expression:");
		Parser parser = new Parser(System.in);
		SimpleNode root = parser.Expression(); // returns reference to root node
        	
		root.dump(""); // prints the tree on the screen

		//System.out.println("Expression value: "+myCalc.eval(root));
    }
	
}

PARSER_END(Parser)

SKIP :
{
	" " | "\r" | "\t" | "//"
}

TOKEN:
{
    	< INTEGER: (["0"-"9"])+ >
	|   < LF: "\n" >
	|   < PVIRG: ";" >
	|   < FSTOP: ".">
	|   < OSBRACK: "[">
	|   < CSBRACK: "]">
	|   < ORBRACK:"(">
	|   < CRBRACK:")">
	|   < EQUAL:"=">
	|   < OPERATOR:("&&"|"<"|"+"|"-"|"*"|"/")>
	|   < IF:"if">
	|   < ELSE: "else">
	|   < INT:"int">
	|   < NEW:"new">
	|   < THIS:"this">
	|   < TRUE:"true">
    |   <WHILE:"while">
	|   < FALSE: "false">
    |   < IMPORT: "import" >
    |   < LENGTH: "length">
    |   < IDENTIFIER: ["A"-"Z", "a"-"z"](["0"-"9", "A"-"Z", "a"-"z"])* >
}

SimpleNode Expression(): {}
{
   Main() {return jjtThis;} // Java code inside brackets
}

void Main() #void : {}
{
    Statement() <LF>
    /*(
        ImportDeclaration()|
        ExpressionDeclaration()
    )*/

}


void Statement() #Statement: {}
{
    "{" (Statement())* "}"
    | <IF> "(" ExpressionDeclaration() ")" Statement() <ELSE> Statement()
    | <WHILE>  "(" ExpressionDeclaration() ")" Statement()
    |  IdentifierExpression()
}

void IdentifierExpression() #void:{}
{
    <IDENTIFIER> (<PVIRG> | Attribution())
}

void Attribution() #void:{}
{
   ["[" ExpressionDeclaration() "]"] <EQUAL> ExpressionDeclaration() <PVIRG>
}


void ExpressionDeclaration() #void: {}
{
        (<INTEGER> #Integer
    |   <TRUE> #True
    |   <FALSE> #False
    |   <IDENTIFIER> #Ident
    |   <THIS> #This
    |   <NEW> (<INT> "[" ExpressionDeclaration() "]" | <IDENTIFIER> "(" ")")
    |   "!" ExpressionDeclaration()
    |   "(" ExpressionDeclaration() ")")

/*
        [<OPERATOR> #Operator ExpressionDeclaration()
    |   "["  ExpressionDeclaration() "]"
    | "." (<LENGTH>| <IDENTIFIER> "(" [ExpressionDeclaration() ("," ExpressionDeclaration() )*] ")")]*/


/*RAZÃO CHOISE CONFLICT NAS DUAS PRIMEIRAS PRODUÇÕES??*/


}


void ImportDeclaration() #Imp: {}
{
    <IMPORT> Identifier() <PVIRG> <LF>
}
void Identifier() #Ident: {}
{
   <IDENTIFIER> ["." Identifier()]
}
